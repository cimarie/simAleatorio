# -*- coding: utf-8 -*-
import numpy as np
import scipy.misc
from scipy.optimize import brentq
import matplotlib.pyplot as plt
import pylab
import eigenvalue as eg
import numpy.linalg as LA
from math import *
from fitness import *
from selmig import *

# Cria figura autovalores vs. m para diferentes deltas
def autovalores_m(w0,b,c,n,beta,opcao):

    # Cria vetor com os valores de migracao que serao usados
    vetor_mig = np.arange(0,0.61,0.01,dtype=float)

    # Abre arquivo com os deltas
    with open('dados.txt', 'r') as f:
        exemplos = [float(x) for x in f.readline().split()]

    # Cria vetor para receber os autovalores da matriz
    autovalores = np.empty((len(exemplos),len(vetor_mig)))

    # Cria vetor para receber labels
    label = []

    i_m=0

    for m in vetor_mig:

        j = 0

        for delta in exemplos:

            # label para colocar no grafico
            label.append('delta = ' + str(delta) + ' m_c = %.3f' %(m_critico(w0,b,c,n,delta,beta)))

            # Cria matriz de selecao
            S = matriz_selecao(n,delta,b,c,w0,beta)

            # Cria matriz de migracao
            M = matriz_migracao(n,m)

            autovalores[j][i_m] = eg.av_dominante(np.dot(M,S))

            j = j + 1

        i_m = i_m + 1

    #plt.figure(figsize=(30.6,3.48), dpi=100)

    if opcao==0:

        # Mostra um grafico da evolucao de pA
        plt.plot(vetor_mig,autovalores[0,:],label=label[0])
        for i in range(j-1):
            plt.hold(True)
            plt.plot(vetor_mig,autovalores[i+1,:],label=label[i+1])

        # Label
        plt.xlabel("m")
        plt.ylabel("Autovalor")

        # Titulo
        titulo = "Autovalor ("+"b = "+str(b)+", c = "+str(c) + ", n = " + str(n) + ", beta = " + str(beta) + ")"
        plt.title(titulo)

        # Limite e intervalos do eixo x
        pylab.xlim([0.0,0.6])
        pylab.xticks(np.arange(0.0,0.6,0.1))

        # Limite e intervalos do eixo y
        pylab.ylim([0.0,1.8])
        pylab.yticks(np.arange(0.0,1.8,0.2))

        # Legenda
        pylab.legend(loc='upper right')
        plt.hold(False)

        # Grid
        plt.grid(True)

        # Ajusta a figura
        plt.tight_layout()

        # Salva fig
        nome = "bowles_delta_beta="+str(beta) + ".png"
        plt.savefig(nome)

        # Fecha fig
        plt.close()

    else:

        arq = open("bowles_delta_b="+str(b)+"_beta="+str(beta)+".txt",'w')

        for cont in range(len(vetor_mig)):
            arq.write(str(vetor_mig[cont]))
            for i in range(len(exemplos)):
                arq.write("\t")
                arq.write(str(autovalores[i,cont]))

            arq.write("\n")

        arq.close()


# Funcao rho: calcula (autovalor dominante - 1) a partir dos parametros
def rho(m,w0,b,c,n,delta,beta):

    # Cria matriz de selecao
    S = matriz_selecao(n,delta,b,c,w0,beta)

    # Cria matriz de migracao
    M = matriz_migracao(n,m)

    return eg.av_dominante(np.dot(M,S))-1

# Encontra m critico ate o qual todos os autovalores sao maiores que 1 (se 0<m<1, usa o metodo da secante para achar raizes)
def m_critico(w0,b,c,n,delta,beta):

    fa = rho(0.,w0,b,c,n,delta,beta)

    fb = rho(1.,w0,b,c,n,delta,beta)

    if(fa*fb>0):
        if(fa>0):
            return 0.
        else:
            return 1.

    # brenth encontra o zero da funcao rho no intervalo [0.,1.]
    return brentq(rho, 0., 1., xtol=0.001, args=(w0,b,c,n,delta,beta))

def encontra_mc(w0,beta,b,c,opcao):

    # Abre arquivo com os tamanhos dos grupos
    with open('ndados.txt', 'r') as f:
        exemplos = [int(x) for x in f.readline().split()]

    print exemplos

    contador1 = 0

    vetor_delta = np.arange(0.01,1.01,0.01,dtype=float)

    vetor_migc = np.empty((len(exemplos),len(vetor_delta)))

    label = []

    for n in exemplos:

        print(n)

        label.append('n = ' + str(n))

        contador2 = 0

        for delta in vetor_delta:

            vetor_migc[contador1][contador2] = m_critico(w0,b,c,n,delta,beta)

            contador2 = contador2 + 1

        contador1 = contador1 + 1

    w, h = plt.figaspect(1.2)
    plt.figure(figsize=(w,h),dpi=100)

    if opcao==0:

        # Mostra um grafico a migracao critica vs. delta
        plt.plot(vetor_delta,vetor_migc[0,:],label=label[0])
        for i in range(contador1-1):
            plt.hold(True)
            plt.plot(vetor_delta,vetor_migc[i+1,:],label=label[i+1])

        # Label
        plt.xlabel("delta")
        plt.ylabel("m critico")

        # Titulo
        titulo = "Migracao critica ("+"b = "+str(b)+", c = "+str(c) + ", beta = " + str(beta) + ")"
        plt.title(titulo)

        # Limite e intervalos do eixo x
        pylab.xlim([0.0,1.0])
        pylab.xticks(np.arange(0.0,1.1,0.1))

        # Limite e intervalos do eixo y
        pylab.ylim([-0.01,0.5])
        pylab.yticks(np.arange(0.,0.5,0.05))

        # Legenda
        pylab.legend(loc='upper right')
        plt.hold(False)

        # Grid
        plt.grid(True)

        plt.tight_layout()

        # Salva fig
        nome = "bowles_m_critico_beta="+str(beta) + ".png"
        plt.savefig(nome)

        # Fecha fig
        plt.close()

    else:

        arq = open("bowles_m_critico_b="+str(b)+"_beta="+str(beta)+".txt",'w')

        for cont in range(len(vetor_delta)):
            arq.write(str(vetor_delta[cont]))
            for i in range(len(exemplos)):
                arq.write("\t")
                arq.write(str(vetor_migc[i,cont]))

            arq.write("\n")

        arq.close()

# Gera figura beta(m) sem as cores ciano magenta
def beta_m(w0, b, c, n, delta,opcao):

    r = 10000

    vetor_beta = np.arange(0.0,1.+1./r,1./r,dtype=float)

    vetor_m = np.empty(len(vetor_beta))

    for i in range(len(vetor_beta)):

        vetor_m[i]=m_critico(w0,b,c,n,delta,vetor_beta[i])
        
        print i

    w, h = plt.figaspect(1)
    plt.figure(figsize=(w,h),dpi=100)

    if opcao==0:

        # Mostra um grafico a migracao critica vs. delta
        plt.plot(vetor_beta,vetor_m)

        # Label
        plt.xlabel("beta")
        plt.ylabel("m_critico")

        # Titulo
        titulo = "m_critico x beta ("+"b = "+str(b)+", c = "+str(c) + ", n = " + str(n) + ", delta = " + str(delta) + ")"
        plt.title(titulo)

        plt.autoscale()

        # Limite e intervalos do eixo x
        #pylab.xlim([0.0,0.2])
        #pylab.xticks(np.arange(0.0,0.21,0.05))

        # Limite e intervalos do eixo y
        #pylab.ylim([0.0,0.2])
        #pylab.yticks(np.arange(0.0,0.21,0.05))

        # Grid
        plt.grid(True)

        plt.tight_layout()

        # Salva fig
        nome = "b3_m_beta_delta="+str(delta) + ".png"
        plt.savefig(nome)

        # Fecha fig
        plt.close()

    else:

        arq = open("b3m_beta_b="+str(b)+"_delta="+str(delta)+".txt",'w')

        for cont in range(len(vetor_m)):
            arq.write(str(vetor_beta[cont]))
            arq.write("\t")
            arq.write(str(vetor_m[cont]))
            arq.write("\n")

        arq.close()

# gera figura beta(m) divisao nas cores ciano e magenta
def beta_m2(w0, b, c, n, delta):

    r = 100

    vetor_beta = []
    vetor_m = []

    for i in range(r+1):

        vetor_beta = np.append(vetor_beta,np.arange(0.0,1.+1./r,1./r,dtype=float))

        vetor_m = np.append(vetor_m,[float(i)/r]*(r+1))

    print len(vetor_beta)

    for i in range(len(vetor_beta)):

        av = rho(vetor_m[i],w0,b,c,n,delta,vetor_beta[i])+1

        z[i] = 'c' if av<1 else 'm'

    w, h = plt.figaspect(1)
    plt.figure(figsize=(w,h),dpi=100)

    # Mostra um grafico a migracao critica vs. delta
    plt.scatter(vetor_m,vetor_beta,c=z,edgecolors='none')

    # Label
    plt.xlabel("m")
    plt.ylabel("beta")

    # Titulo
    titulo = "beta x m ("+"b = "+str(b)+", c = "+str(c) + ", n = " + str(n) + ", delta = " + str(delta) + ")"
    plt.title(titulo)

    # Limite e intervalos do eixo x
    pylab.xlim([0.0,1.0])
    pylab.xticks(np.arange(0.0,1.1,0.1))

    # Limite e intervalos do eixo y
    pylab.ylim([0.0,1.0])
    pylab.yticks(np.arange(0.0,1.1,0.1))

    plt.tight_layout()

    # Salva fig
    nome = "bowles_m_beta_delta="+str(delta) + ".png"
    plt.savefig(nome)

    # Fecha fig
    plt.close()


# Faz o grÃ¡fico em barras de autovetores
def autovetores(n,b,c,w0,beta):

    vetor_mig = np.arange(0.03,0.06,0.01,dtype=float)

    #vetor_mig = np.arange(0.1, 0.2, 0.05,dtype=float)
    vetor_delta = np.array((0.01,0.5,0.8),dtype=float)

    avec = np.empty((len(vetor_mig),n))

    j = 0

    vetor = np.arange(0.8,n,1,dtype=float)

    # Define as caracteristicas da figura gerada
    plt.figure(1)

    plt.rc('text',usetex=True)
    plt.rc('font', family='serif')

    #plt.tight_layout()

    f, ax = plt.subplots(3, 4,sharey=True)

    for delta in vetor_delta:

        # Cria matriz de selecao
        S = matriz_selecao(n,delta,b,c,w0,beta)
        i = 0

        for m in vetor_mig:

            # Cria matriz de migracao
            M = matriz_migracao(n,m)

            # Calcula autovetores
            avec[i] = eg.calcula_evec(np.dot(S,M))

            avec[i] = avec[i]/sum(avec[i])

            #ax=plt.subplot(3,4,4*j+i)

            ax[j,i].set_xticks((1,5,10,15,20))

            if i==0:
                ax[j,0].set_ylabel(r'$\nu$')

            ax[j,i].set_yticks(np.arange(0.0,0.5,0.1))

            ax[j,i].autoscale_view(True,True,True)

            ax[j,i].set_xlabel(r"$k$")

            lab = 'm=' + str(m) + r'$\rho$='+"%.3f" % (eg.av_dominante(np.dot(S,M)))+"\n"+r'$m_c$='+"%.3f" % (m_critico(w0,b,c,n,delta,beta))+", "+r'$\delta$='+str(delta)

            #lab = r'$m_c$='+"%.3f" % (m_critico(w0,b,c,n,delta,beta))+", "+r'$\delta$='+str(delta)

            ax[j,i].set_title(lab,fontsize=8)

            plt.grid()

            # Atualiza contador
            i = i+1

            #print 4*j+i

            ax[j,i-1].bar(vetor,avec[i-1]/sum(avec[i-1]),0.4)
           
        j = j+1

    plt.legend(loc="center")
    plt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.3, hspace=0.7)

    # titulo da figura
    titulo = "Equilibrium distribution (b="+str(b)+", c="+str(c)+", n="+str(n)+","+r'$\beta$='+str(beta)+")"
    plt.suptitle(titulo) 

    # Salva fig
    nome = "b_eigenvec_b="+str(b)+"c=1.eps"
    plt.savefig(nome)

    # Fecha fig
    plt.close()

# Main
def main():

    w0 = 1.             # fitness basal
    beta = 0.5           # probabilidade de combate
    b = 0.5              # beneficio gerado por altruista
    c = 1.              # custo para um altruista
    n = 20
    delta = 0.001
    m = 0.1

    # Cria matriz de selecao
    #S = matriz_selecao(n,delta,b,c,w0,beta)

    # Cria matriz de migracao
    #M = matriz_migracao(n,m)

#    vetor = eg.calcula_evec(np.dot(S,M))

    #for delta in [0.01,0.5,0.8]:
    #    beta_m(w0, b, c, n, delta,1)

    #autovalores_m(w0,b,c,n,beta,0)

    #beta_m(w0,b,c,n,delta,0)

    autovetores(n,b,c,w0,beta)

    #encontra_mc(w0,beta,b,c,1)


if  __name__ =='__main__':main()
